1. Th√™m b√†i h√°t m·ªõi (Create)
Method: POST

URL: http://localhost:5000/api/songs

Headers:

Authorization: Bearer <token>

Content-Type: multipart/form-data

Body (form-data):

Key	Type	V√≠ d·ª•
title	Text	‚ÄúT√™n b√†i‚Äù
artist	Text	‚ÄúT√™n ngh·ªá sƒ©‚Äù
username	Text	‚Äúnguyen_viet_toan‚Äù
type	Text	‚Äúpop‚Äù, ‚Äúrock‚Äù, ‚Ä¶
description	Text	‚ÄúM√¥ t·∫£ ng·∫Øn (kh√¥ng b·∫Øt bu·ªôc)‚Äù
image	File	Ch·ªçn file ·∫£nh (jpg/png)
audio	File	Ch·ªçn file audio (mp3/‚Ä¶)

Ch√∫ √Ω: Controller hi·ªán t·∫°i (createSong trong src/controllers/songController.js) y√™u c·∫ßu ph·∫£i upload image v√† audio qua multer; n·∫øu b·∫°n ch·ªâ g·ª≠i JSON th√¨ s·∫Ω b·ªã l·ªói thi·∫øu file.

2. L·∫•y danh s√°ch b√†i h√°t (Read ‚Äì list)
Method: GET

URL:

bash
Copy
Edit
http://localhost:5000/api/songs?page=1&limit=25
page v√† limit tu·ª≥ ch·ªçn, m·∫∑c ƒë·ªãnh page=1, limit=25

Headers:

Authorization: Bearer <token>

Response tr·∫£ v·ªÅ:

json
Copy
Edit
{
  "songs": [ /* m·∫£ng c√°c object song */ ],
  "totalPages": 10,
  "currentPage": 1
}
3. L·∫•y chi ti·∫øt 1 b√†i h√°t (Read ‚Äì detail)
Method: GET

URL:

bash
Copy
Edit
http://localhost:5000/api/songs/{songId}
Headers:

Authorization: Bearer <token>

4. Th√≠ch b√†i h√°t (Like)
Method: POST

URL:

bash
Copy
Edit
http://localhost:5000/api/songs/{songId}/like
Headers:

Authorization: Bearer <token>

5. B·ªè th√≠ch b√†i h√°t (Unlike)
Method: DELETE

URL:

bash
Copy
Edit
http://localhost:5000/api/songs/{songId}/like
Headers:

Authorization: Bearer <token>

6. L·∫•y danh s√°ch b√†i h√°t ƒë√£ th√≠ch c·ªßa user (Read ‚Äì liked)
Method: GET

URL:

bash
Copy
Edit
http://localhost:5000/api/songs/liked
Headers:

Authorization: Bearer <token>

7. T√¨m ki·∫øm b√†i h√°t (Search)
Method: GET

URL:

bash
Copy
Edit
http://localhost:5000/api/songs/search?q=tu-khoa
Headers:

Authorization: Bearer <token>

8. L·∫•y 1 b√†i h√°t ng·∫´u nhi√™n (Random)
Method: GET

URL:

bash
Copy
Edit
http://localhost:5000/api/songs/random
Headers:

Authorization: Bearer <token>

üìå Tr·∫£ v·ªÅ m·ªôt b√†i h√°t b·∫•t k·ª≥ t·ª´ MongoDB b·∫±ng aggregate([ { $sample: { size: 1 } } ]).

9. C·∫≠p nh·∫≠t b√†i h√°t (Update) ‚úÖ (n·∫øu b·∫°n ƒë√£ tri·ªÉn khai)
Method: PUT

URL:

bash
Copy
Edit
http://localhost:5000/api/songs/{songId}
Headers:

Authorization: Bearer <token>

Content-Type: multipart/form-data (n·∫øu update c·∫£ ·∫£nh/audio)

Body (form-data):

Key	Type	Ghi ch√∫
title	Text	Tu·ª≥ ch·ªçn
artist	Text	Tu·ª≥ ch·ªçn
image	File	Tu·ª≥ ch·ªçn
audio	File	Tu·ª≥ ch·ªçn

üìå Trong controller updateSong, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng Song.findByIdAndUpdate(id, updateData, { new: true }).

10. Xo√° b√†i h√°t (Delete) ‚úÖ (n·∫øu b·∫°n ƒë√£ tri·ªÉn khai)
Method: DELETE

URL:

bash
Copy
Edit
http://localhost:5000/api/songs/{songId}
Headers:

Authorization: Bearer <token>

üìå Trong controller deleteSong, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng Song.findByIdAndDelete(id).

11. L·ªçc b√†i h√°t theo th·ªÉ lo·∫°i (type)
Method: GET

URL:

bash
Copy
Edit
http://localhost:5000/api/songs/type/{type}
VD: /api/songs/type/pop, /type/ballad

Headers:

Authorization: Bearer <token>

üìå Tr·∫£ v·ªÅ danh s√°ch c√°c b√†i h√°t c√≥ type = {type}.

12. L·∫•y danh s√°ch b√†i h√°t c·ªßa m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ
Method: GET

URL:

bash
Copy
Edit
http://localhost:5000/api/songs/user/{username}
VD: /api/songs/user/nguyen_viet_toan

Headers:

Authorization: Bearer <token>

üìå Tr·∫£ v·ªÅ t·∫•t c·∫£ b√†i h√°t do ng∆∞·ªùi d√πng ƒë√≥ ƒëƒÉng.

13. L·∫•y s·ªë l∆∞·ª£t th√≠ch c·ªßa 1 b√†i h√°t
Method: GET

URL:

bash
Copy
Edit
http://localhost:5000/api/songs/{songId}/likes
Headers:

Authorization: Bearer <token>

üìå Controller s·∫Ω ƒë·∫øm likedBy.length v√† tr·∫£ v·ªÅ:

json
Copy
Edit
{ "likes": 12 }
